- hosts: database
  gather_facts: no
  become: true
  tasks:
  - name: Copy certififcates generated by Auto-TLS
    copy:
      src: "/var/lib/cloudera-scm-agent/agent-cert/{{ item }}"
      dest: "/var/lib/pgsql/data/{{ item }}"
      owner: postgres
      group: postgres
      mode: '0400'
      backup: yes
      remote_src: yes
    loop:
      - cm-auto-host_cert_chain.pem
      - cm-auto-global_cacerts.pem

  - name: Read Host Cert Key
    slurp:
      src: "/var/lib/cloudera-scm-agent/agent-cert/cm-auto-host_key.pw"
    register: cert_key
    changed_when: no
    check_mode: false

  - name: Write server.key
    shell: "openssl rsa -in /var/lib/cloudera-scm-agent/agent-cert/cm-auto-host_key.pem -out /tmp/server.key -passin pass:{{ cert_key['content'] | b64decode }}"
    changed_when: no
    check_mode: false

  - name: Copy server.key to Postgres DataDir
    copy:
      src: "/tmp/server.key"
      dest: "/var/lib/pgsql/data/server.key"
      owner: postgres
      group: postgres
      mode: '0400'
      remote_src: yes

  - name: Update Postgres Configuration (pg_hba.conf)
    lineinfile:
      path: "/var/lib/pgsql/data/pg_hba.conf"
      line: 'hostssl all all 0.0.0.0/0 md5'
      create: no

  - name: Update Postgres Configuration (postgresql.conf)
    ini_file:
      path: '/var/lib/pgsql/data/postgresql.conf'
      create: no
      section: null
      option: "{{ item.option }}"
      value: "{{ item.value }}"
      state: present
    with_items:
      - { option: ssl, value: on }
      - { option: ssl_cert_file, value: "'cm-auto-host_cert_chain.pem'" }
      - { option: ssl_key_file, value: "'server.key'" }
      - { option: ssl_ca_file, value: "'cm-auto-global_cacerts.pem'" }

  - name: Stop ClouderaManager Server (if any)
    service:
      name: cloudera-scm-server
      state: stopped
    failed_when: no

  - name: Enable / Start Postgresql
    service:
      name: postgresql
      state: restarted
      enabled: yes

  - name: Start ClouderaManager Server (if any)
    service:
      name: cloudera-scm-server
      state: started
    failed_when: no

